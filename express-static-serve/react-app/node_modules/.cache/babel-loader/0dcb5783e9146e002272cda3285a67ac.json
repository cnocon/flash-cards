{"ast":null,"code":"import _slicedToArray from\"/Users/cristin/Sites/flash-cards/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useEffect,useState}from\"react\";import Card from'../Card/Card';import cardsContext from\"../../context/Cards/CardsContext\";import*as Styled from'./Deck.styles';var Deck=function Deck(){var CardsContext=useContext(cardsContext);var _useState=useState(0),_useState2=_slicedToArray(_useState,2),activeIndex=_useState2[0],setActiveIndex=_useState2[1];var handleNavClick=function handleNavClick(e){var increment=e.target.tagName==='BUTTON'?e.target.dataset.increment:e.target.parentNode.dataset.increment;var totalQuestions=Object.values(CardsContext.cards).map(function(c){return c.questions;}).flat().length;if(increment>0){// If advancing to next\nsetActiveIndex(function(prevActiveIndex){return prevActiveIndex+1<totalQuestions?prevActiveIndex+1:0;});}else{// If going back to previous\nsetActiveIndex(function(prevActiveIndex){return prevActiveIndex-1>=0?prevActiveIndex-1:totalQuestions-1;});}};useEffect(function(){CardsContext.getCards();},[]);return/*#__PURE__*/React.createElement(Styled.Deck,null,CardsContext.cards?Object.values(CardsContext.cards).flat().map(function(fullCategory){return fullCategory.questions;}).flat().map(function(question,i){return/*#__PURE__*/React.createElement(Card,{data:question,activeSide:\"front\",key:\"\".concat(i,\"-\").concat(question._id),position:i,isActive:i===activeIndex,navClickHandler:function navClickHandler(){return handleNavClick;}});}):null);};export default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","Styled","Deck","CardsContext","activeIndex","setActiveIndex","handleNavClick","e","increment","target","tagName","dataset","parentNode","totalQuestions","Object","values","cards","map","c","questions","flat","length","prevActiveIndex","getCards","fullCategory","question","i","_id"],"mappings":"mHAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAuD,OAAvD,CACA,MAAOC,CAAAA,IAAP,KAAiB,cAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,kCAAzB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,eAAxB,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB,GAAMC,CAAAA,YAAY,CAAGP,UAAU,CAACI,YAAD,CAA/B,CADiB,cAEqBF,QAAQ,CAAC,CAAD,CAF7B,wCAEVM,WAFU,eAEGC,cAFH,eAIjB,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,CAAC,CAAI,CAC1B,GAAMC,CAAAA,SAAS,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,GAAqB,QAArB,CAAgCH,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBH,SAAjD,CAA6DD,CAAC,CAACE,MAAF,CAASG,UAAT,CAAoBD,OAApB,CAA4BH,SAA3G,CACA,GAAMK,CAAAA,cAAc,CAAGC,MAAM,CAACC,MAAP,CAAcZ,YAAY,CAACa,KAA3B,EAAkCC,GAAlC,CAAsC,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,SAAN,EAAvC,EAAwDC,IAAxD,GAA+DC,MAAtF,CAEE,GAAIb,SAAS,CAAG,CAAhB,CAAmB,CACjB;AACAH,cAAc,CAAC,SAAAiB,eAAe,QAAIA,CAAAA,eAAe,CAAG,CAAlB,CAAsBT,cAAtB,CAAuCS,eAAe,CAAG,CAAzD,CAA6D,CAAjE,EAAhB,CAAd,CACD,CAHD,IAGO,CACL;AACAjB,cAAc,CAAC,SAAAiB,eAAe,QAAIA,CAAAA,eAAe,CAAG,CAAlB,EAAuB,CAAvB,CAA2BA,eAAe,CAAG,CAA7C,CAAiDT,cAAc,CAAG,CAAtE,EAAhB,CAAd,CACD,CAEJ,CAZD,CAcAhB,SAAS,CAAC,UAAM,CACdM,YAAY,CAACoB,QAAb,GACD,CAFQ,CAEN,EAFM,CAAT,CAIA,mBACE,oBAAC,MAAD,CAAQ,IAAR,MACGpB,YAAY,CAACa,KAAb,CACGF,MAAM,CAACC,MAAP,CAAcZ,YAAY,CAACa,KAA3B,EACCI,IADD,GAECH,GAFD,CAEK,SAAAO,YAAY,QAAIA,CAAAA,YAAY,CAACL,SAAjB,EAFjB,EAGCC,IAHD,GAICH,GAJD,CAIK,SAACQ,QAAD,CAAWC,CAAX,CAAiB,CACpB,mBACE,oBAAC,IAAD,EACE,IAAI,CAAED,QADR,CAEE,UAAU,QAFZ,CAGE,GAAG,WAAKC,CAAL,aAAUD,QAAQ,CAACE,GAAnB,CAHL,CAIE,QAAQ,CAAED,CAJZ,CAKE,QAAQ,CAAEA,CAAC,GAAKtB,WALlB,CAME,eAAe,CAAE,iCAAME,CAAAA,cAAN,EANnB,EADF,CAUD,CAfD,CADH,CAiBG,IAlBN,CADF,CAsBD,CA5CD,CA8CA,cAAeJ,CAAAA,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const totalQuestions = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n    \n      if (increment > 0) {\n        // If advancing to next\n        setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < totalQuestions ? prevActiveIndex + 1 : 0)\n      } else { \n        // If going back to previous\n        setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : totalQuestions - 1) \n      }\n    \n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  \n  return (\n    <Styled.Deck>\n      {CardsContext.cards\n        ? Object.values(CardsContext.cards)\n          .flat()\n          .map(fullCategory => fullCategory.questions)\n          .flat()\n          .map((question, i) => {\n            return (\n              <Card \n                data={question}\n                activeSide={`front`}\n                key={`${i}-${question._id}`}\n                position={i}\n                isActive={i === activeIndex}\n                navClickHandler={() => handleNavClick} \n              />\n            )\n          })\n        : null}\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}