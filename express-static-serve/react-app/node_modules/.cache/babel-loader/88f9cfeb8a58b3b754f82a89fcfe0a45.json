{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  let accumulator = -1;\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0);\n    } else {\n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, CardsContext.cards ? Object.values(CardsContext.cards).flat().map(catData => {\n    console.log(Object.values(CardsContext.cards).flat());\n    const questionsData = catData.questions;\n    questionsData.map((question, i) => {\n      accumulator = accumulator + 1;\n      return /*#__PURE__*/React.createElement(Card, {\n        data: question,\n        activeSide: `front`,\n        key: question._id,\n        position: accumulator,\n        isActive: i === activeIndex,\n        navClickHandler: () => handleNavClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      });\n    });\n  }) : null);\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","Styled","Deck","CardsContext","activeIndex","setActiveIndex","accumulator","handleNavClick","e","increment","target","tagName","dataset","parentNode","prevActiveIndex","cards","length","getCards","Object","values","flat","map","catData","console","log","questionsData","questions","question","i","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,YAAY,GAAGP,UAAU,CAACI,YAAD,CAA/B;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIQ,WAAW,GAAG,CAAC,CAAnB;;AAEA,QAAMC,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,KAAqB,QAArB,GAAgCH,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBH,SAAjD,GAA6DD,CAAC,CAACE,MAAF,CAASG,UAAT,CAAoBD,OAApB,CAA4BH,SAA3G;;AACA,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAJ,MAAAA,cAAc,CAACS,eAAe,IAAIA,eAAe,GAAG,CAAlB,GAAsBX,YAAY,CAACY,KAAb,CAAmBC,MAAzC,GAAkDF,eAAe,GAAG,CAApE,GAAwE,CAA5F,CAAd;AACD,KAHD,MAGO;AACL;AACAT,MAAAA,cAAc,CAACS,eAAe,IAAIA,eAAe,GAAG,CAAlB,IAAuB,CAAvB,GAA2BA,eAAe,GAAG,CAA7C,GAAiDX,YAAY,CAACY,KAAb,CAAmBC,MAAnB,GAA4B,CAAjG,CAAd;AACD;AACF,GATD;;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAACc,QAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,MAAD,CAAQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,YAAY,CAACY,KAAb,GACGG,MAAM,CAACC,MAAP,CAAchB,YAAY,CAACY,KAA3B,EAAkCK,IAAlC,GAAyCC,GAAzC,CAA6CC,OAAO,IAAI;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACC,MAAP,CAAchB,YAAY,CAACY,KAA3B,EAAkCK,IAAlC,EAAZ;AACA,UAAMK,aAAa,GAAGH,OAAO,CAACI,SAA9B;AAEAD,IAAAA,aAAa,CAACJ,GAAd,CAAkB,CAACM,QAAD,EAAWC,CAAX,KAAiB;AACjCtB,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACE,0BACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAEqB,QADR;AAEE,QAAA,UAAU,EAAG,OAFf;AAGE,QAAA,GAAG,EAAEA,QAAQ,CAACE,GAHhB;AAIE,QAAA,QAAQ,EAAEvB,WAJZ;AAKE,QAAA,QAAQ,EAAEsB,CAAC,KAAKxB,WALlB;AAME,QAAA,eAAe,EAAE,MAAMG,cANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD,KAZH;AAaC,GAjBD,CADH,GAmBG,IApBN,CADF;AAwBD,CA5CD;;AA8CA,eAAeL,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  let accumulator = -1;\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0)\n    } else { \n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1) \n    }\n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  \n  return (\n    <Styled.Deck>\n      {CardsContext.cards\n        ? Object.values(CardsContext.cards).flat().map(catData => {\n          console.log(Object.values(CardsContext.cards).flat());\n          const questionsData = catData.questions;\n          \n          questionsData.map((question, i) => {\n            accumulator = accumulator + 1;\n              return (\n                <Card \n                  data={question}\n                  activeSide={`front`}\n                  key={question._id} \n                  position={accumulator}\n                  isActive={i === activeIndex}\n                  navClickHandler={() => handleNavClick} \n                />\n              )\n            })\n          })\n        : null}\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}