{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport styled from \"@emotion/styled\";\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    console.log('handleNavclick', increment);\n\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0);\n    } else {\n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, [activeIndex]);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, CardsContext.cards.length ? CardsContext.cards.map((card, i) => /*#__PURE__*/React.createElement(Card, {\n    data: card,\n    key: card._id,\n    position: i,\n    isActive: i === activeIndex,\n    navClickHandler: () => handleNavClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  })) : null);\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","styled","Deck","CardsContext","activeIndex","setActiveIndex","handleNavClick","e","increment","target","tagName","dataset","parentNode","console","log","prevActiveIndex","cards","length","getCards","map","card","i","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,YAAY,GAAGP,UAAU,CAACI,YAAD,CAA/B;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;;AAEA,QAAMQ,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,KAAqB,QAArB,GAAgCH,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBH,SAAjD,GAA6DD,CAAC,CAACE,MAAF,CAASG,UAAT,CAAoBD,OAApB,CAA4BH,SAA3G;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,SAA9B;;AACA,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAH,MAAAA,cAAc,CAACU,eAAe,IAAIA,eAAe,GAAG,CAAlB,GAAsBZ,YAAY,CAACa,KAAb,CAAmBC,MAAzC,GAAkDF,eAAe,GAAG,CAApE,GAAwE,CAA5F,CAAd;AACD,KAHD,MAGO;AACL;AACAV,MAAAA,cAAc,CAACU,eAAe,IAAIA,eAAe,GAAG,CAAlB,IAAuB,CAAvB,GAA2BA,eAAe,GAAG,CAA7C,GAAiDZ,YAAY,CAACa,KAAb,CAAmBC,MAAnB,GAA4B,CAAjG,CAAd;AACD;AACF,GAXD;;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAACe,QAAb;AACD,GAFQ,EAEN,CAACd,WAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,MAAD,CAAQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,YAAY,CAACa,KAAb,CAAmBC,MAAnB,GACGd,YAAY,CAACa,KAAb,CAAmBG,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,kBACvB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAED,IADR;AAEE,IAAA,GAAG,EAAEA,IAAI,CAACE,GAFZ;AAGE,IAAA,QAAQ,EAAED,CAHZ;AAIE,IAAA,QAAQ,EAAEA,CAAC,KAAKjB,WAJlB;AAKE,IAAA,eAAe,EAAE,MAAME,cALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADH,GAUG,IAXN,CADF;AAeD,CApCD;;AAsCA,eAAeJ,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport styled from \"@emotion/styled\";\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    \n    console.log('handleNavclick', increment);\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0)\n    } else { \n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1) \n    }\n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, [activeIndex]);\n\n  return (\n    <Styled.Deck>\n      {CardsContext.cards.length\n        ? CardsContext.cards.map((card, i) => (\n          <Card \n            data={card} \n            key={card._id} \n            position={i} \n            isActive={i === activeIndex}\n            navClickHandler={() => handleNavClick}\n          />\n        ))\n        : null}\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}