{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0);\n    } else {\n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, CardsContext.cards ? CardsContext.cards.forEach(pair => {\n    console.log(pair);\n    questionsData.questions.map((question, i) => /*#__PURE__*/React.createElement(Card, {\n      data: question,\n      activeSide: `front`,\n      key: question._id,\n      position: i,\n      isActive: i === activeIndex,\n      navClickHandler: () => handleNavClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }));\n  }) : null);\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","Styled","Deck","CardsContext","activeIndex","setActiveIndex","handleNavClick","e","increment","target","tagName","dataset","parentNode","prevActiveIndex","cards","length","getCards","forEach","pair","console","log","questionsData","questions","map","question","i","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,YAAY,GAAGP,UAAU,CAACI,YAAD,CAA/B;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;;AAEA,QAAMQ,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,KAAqB,QAArB,GAAgCH,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBH,SAAjD,GAA6DD,CAAC,CAACE,MAAF,CAASG,UAAT,CAAoBD,OAApB,CAA4BH,SAA3G;;AACA,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAH,MAAAA,cAAc,CAACQ,eAAe,IAAIA,eAAe,GAAG,CAAlB,GAAsBV,YAAY,CAACW,KAAb,CAAmBC,MAAzC,GAAkDF,eAAe,GAAG,CAApE,GAAwE,CAA5F,CAAd;AACD,KAHD,MAGO;AACL;AACAR,MAAAA,cAAc,CAACQ,eAAe,IAAIA,eAAe,GAAG,CAAlB,IAAuB,CAAvB,GAA2BA,eAAe,GAAG,CAA7C,GAAiDV,YAAY,CAACW,KAAb,CAAmBC,MAAnB,GAA4B,CAAjG,CAAd;AACD;AACF,GATD;;AAWAlB,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAACa,QAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,MAAD,CAAQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,YAAY,CAACW,KAAb,GACGX,YAAY,CAACW,KAAb,CAAmBG,OAAnB,CAA2BC,IAAI,IAAI;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAG,IAAAA,aAAa,CAACC,SAAd,CAAwBC,GAAxB,CAA4B,CAACC,QAAD,EAAWC,CAAX,kBACxB,oBAAC,IAAD;AACE,MAAA,IAAI,EAAED,QADR;AAEE,MAAA,UAAU,EAAG,OAFf;AAGE,MAAA,GAAG,EAAEA,QAAQ,CAACE,GAHhB;AAIE,MAAA,QAAQ,EAAED,CAJZ;AAKE,MAAA,QAAQ,EAAEA,CAAC,KAAKrB,WALlB;AAME,MAAA,eAAe,EAAE,MAAME,cANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAUC,GAZD,CADH,GAcG,IAfN,CADF;AAmBD,CAtCD;;AAwCA,eAAeJ,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < CardsContext.cards.length ? prevActiveIndex + 1 : 0)\n    } else { \n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : CardsContext.cards.length - 1) \n    }\n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  \n  return (\n    <Styled.Deck>\n      {CardsContext.cards\n        ? CardsContext.cards.forEach(pair => {\n          console.log(pair)\n          questionsData.questions.map((question, i) => (\n              <Card \n                data={question}\n                activeSide={`front`}\n                key={question._id} \n                position={i}\n                isActive={i === activeIndex}\n                navClickHandler={() => handleNavClick} \n              />\n            ))\n          })\n        : null}\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}