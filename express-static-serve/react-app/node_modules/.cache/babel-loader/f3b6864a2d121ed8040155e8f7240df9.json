{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext, { activeCardsContext, categoriesContext } from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState(null);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0);\n    } else {\n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, CardsContext.cards ? Object.values(CardsContext.cards).flat().map(fullCategory => fullCategory.questions).flat().map((question, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      data: question,\n      activeSide: `front`,\n      key: `${i}-${question._id}`,\n      position: i,\n      isActive: i === activeIndex,\n      navClickHandler: () => handleNavClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    });\n  }) : null);\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","activeCardsContext","categoriesContext","Styled","Deck","CardsContext","activeIndex","setActiveIndex","activeCategory","setActiveCategory","handleNavClick","e","increment","target","tagName","dataset","parentNode","cardCount","Object","values","cards","map","c","questions","flat","length","prevActiveIndex","getCards","fullCategory","question","i","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,YAAP,IAAuBC,kBAAvB,EAA2CC,iBAA3C,QAAoE,kCAApE;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,YAAY,GAAGT,UAAU,CAACI,YAAD,CAA/B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,IAAD,CAApD;;AAEA,QAAMY,cAAc,GAAGC,CAAC,IAAI;AAC1B,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,KAAqB,QAArB,GAAgCH,CAAC,CAACE,MAAF,CAASE,OAAT,CAAiBH,SAAjD,GAA6DD,CAAC,CAACE,MAAF,CAASG,UAAT,CAAoBD,OAApB,CAA4BH,SAA3G;AACA,UAAMK,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcd,YAAY,CAACe,KAA3B,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAACC,SAA7C,EAAwDC,IAAxD,GAA+DC,MAAjF;;AAEA,QAAIb,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACAL,MAAAA,cAAc,CAACmB,eAAe,IAAIA,eAAe,GAAG,CAAlB,GAAsBT,SAAtB,GAAkCS,eAAe,GAAG,CAApD,GAAwD,CAA5E,CAAd;AACD,KAHD,MAGO;AACL;AACAnB,MAAAA,cAAc,CAACmB,eAAe,IAAIA,eAAe,GAAG,CAAlB,IAAuB,CAAvB,GAA2BA,eAAe,GAAG,CAA7C,GAAiDT,SAAS,GAAG,CAAjF,CAAd;AACD;AACF,GAXD;;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACsB,QAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,MAAD,CAAQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtB,YAAY,CAACe,KAAb,GACGF,MAAM,CAACC,MAAP,CAAcd,YAAY,CAACe,KAA3B,EACCI,IADD,GAECH,GAFD,CAEKO,YAAY,IAAIA,YAAY,CAACL,SAFlC,EAGCC,IAHD,GAICH,GAJD,CAIK,CAACQ,QAAD,EAAWC,CAAX,KAAiB;AACpB,wBACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAED,QADR;AAEE,MAAA,UAAU,EAAG,OAFf;AAGE,MAAA,GAAG,EAAG,GAAEC,CAAE,IAAGD,QAAQ,CAACE,GAAI,EAH5B;AAIE,MAAA,QAAQ,EAAED,CAJZ;AAKE,MAAA,QAAQ,EAAEA,CAAC,KAAKxB,WALlB;AAME,MAAA,eAAe,EAAE,MAAMI,cANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAfD,CADH,GAiBG,IAlBN,CADF;AAsBD,CA5CD;;AA8CA,eAAeN,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext, { activeCardsContext, categoriesContext } from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState(null);\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n    \n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0)\n    } else { \n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1) \n    } \n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n  }, []);\n  \n  return (\n    <Styled.Deck>\n      {CardsContext.cards\n        ? Object.values(CardsContext.cards)\n          .flat()\n          .map(fullCategory => fullCategory.questions)\n          .flat()\n          .map((question, i) => {\n            return (\n              <Card \n                data={question}\n                activeSide={`front`}\n                key={`${i}-${question._id}`}\n                position={i}\n                isActive={i === activeIndex}\n                navClickHandler={() => handleNavClick}\n              />\n            )\n          })\n        : null}\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}