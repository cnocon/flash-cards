{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport Card from '../Card/Card';\nimport * as Styled from './Deck.styles';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategoryId, setActiveCategoryId] = useState('');\n  const [activeCategorySlug, setActiveCategorySlug] = useState('all');\n\n  const handleCategoryClick = (e, categoryId, categorySlug) => {\n    // Set active index back to 0 since we're switching categories\n    setActiveIndex(0);\n    setActiveCategorySlug(categorySlug);\n    setActiveCategoryId(categoryId);\n    CardsContext.getActiveCards(activeCategoryId);\n  };\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.activeCards).map(c => c.questions).flat().length;\n\n    if (increment > 0) {\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0);\n    } else {\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n    CardsContext.getCategories();\n    CardsContext.getActiveCards(activeCategoryId);\n  }, [activeCategorySlug, activeCategoryId]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, activeCategorySlug === 'all' ? Object.values(CardsContext.cards).map((fullCategory, categoryIndex) => fullCategory.questions).flat().map((question, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      data: question,\n      activeSide: \"front\",\n      key: `${i}-${question._id}`,\n      position: i,\n      isActive: activeIndex === i,\n      navClickHandler: () => handleNavClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    });\n  }) : CardsContext.cards[activeCategorySlug].questions.map((question, i) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      data: question,\n      activeSide: \"front\",\n      key: `${i}-${question._id}`,\n      position: i,\n      isActive: activeIndex === i,\n      navClickHandler: () => handleNavClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Styled.AppHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Styled.AppHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Front End Dev Flash Cards\")));\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useState","useEffect","useContext","cardsContext","Card","Styled","Deck","CardsContext","activeIndex","setActiveIndex","activeCategoryId","setActiveCategoryId","activeCategorySlug","setActiveCategorySlug","handleCategoryClick","e","categoryId","categorySlug","getActiveCards","handleNavClick","increment","target","tagName","dataset","parentNode","cardCount","Object","values","activeCards","map","c","questions","flat","length","prevActiveIndex","getCards","getCategories","cards","fullCategory","categoryIndex","question","i","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport Card from '../Card/Card';\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategoryId, setActiveCategoryId] = useState('');\n  const [activeCategorySlug, setActiveCategorySlug] = useState('all');\n\n  const handleCategoryClick = (e, categoryId, categorySlug) => {\n    // Set active index back to 0 since we're switching categories\n    setActiveIndex(0)\n    setActiveCategorySlug(categorySlug)\n    setActiveCategoryId(categoryId)\n    CardsContext.getActiveCards(activeCategoryId)\n  }\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.activeCards).map(c => c.questions).flat().length;\n    if (increment > 0) {\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0)\n    } else { \n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1) \n    }\n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n    CardsContext.getCategories();\n    CardsContext.getActiveCards(activeCategoryId);\n  }, [activeCategorySlug, activeCategoryId]);\n  \n  return (\n    <>\n    <Styled.Deck>\n\n      { activeCategorySlug === 'all'\n        ? Object.values(CardsContext.cards)\n          .map((fullCategory, categoryIndex) => fullCategory.questions)\n          .flat()\n          .map((question, i) => {\n            return (\n              <Card \n                data={question}\n                activeSide='front'\n                key={`${i}-${question._id}`}\n                position={i}\n                isActive={activeIndex === i}\n                navClickHandler={() => handleNavClick} \n              />\n            )\n          })\n        \n        : CardsContext.cards[activeCategorySlug].questions.map((question, i) => {\n          return (\n            <Card \n              data={question}\n              activeSide='front'\n              key={`${i}-${question._id}`}\n              position={i}\n              isActive={activeIndex === i}\n              navClickHandler={() => handleNavClick} \n            />\n          )\n        })\n      }\n    </Styled.Deck>\n    <Styled.AppHeader>\n      <Styled.AppHeading>Front End Dev Flash Cards</Styled.AppHeading>\n      \n    </Styled.AppHeader>\n    </>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}