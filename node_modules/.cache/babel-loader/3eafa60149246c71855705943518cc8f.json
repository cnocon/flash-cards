{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport Card from '../Card/Card';\nimport * as Styled from './Deck.styles';\nimport { act } from 'react-dom/test-utils';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState(''); // useEffect(() => {\n  //   CardsContext.getActiveCards()\n  // }, [CardsContext])\n\n  const handleCategoryClick = (e, categoryId, categorySlug) => {\n    console.log(categorySlug);\n    console.log(activeCategory);\n    setActiveCategory(prevActiveCategory => {\n      console.log('prev', prevActiveCategory);\n      return categoryId;\n      CardsContext.getActiveCards(categoryId); // return { _id: categoryId, categorySlug };\n    });\n  };\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n\n    if (increment > 0) {\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0);\n    } else {\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getActiveCards(activeCategory);\n  }, []);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, CardsContext.activeCards && CardsContext.activeCards.length > 0 ? Object.values(CardsContext.activeCards).map((fullCategory, i) => /*#__PURE__*/React.createElement(\"a\", {\n    key: `${fullCategory._id}-${i}`,\n    onClick: e => handleCategoryClick(e, fullCategory._id, fullCategory.slug),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, fullCategory.name)) : Object.values(CardsContext.activeCards).map((fullCategory, i) => /*#__PURE__*/React.createElement(\"a\", {\n    key: `${fullCategory._id}-${i}`,\n    onClick: e => handleCategoryClick(e, fullCategory._id, fullCategory.slug),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, fullCategory.name))));\n};\n\nexport default Deck;\n{\n  /* Object.values(ContextCards.cards)\n  .flat()\n  .map(fullCategory => fullCategory.questions)\n  .flat()\n  .map((question, i) => { \n  //     return (\n  //       <Card \n  //         data={question}\n  //         activeSide={`front`}\n  //         key={`${i}-${question._id}`}\n  //         position={i}\n  //         isActive={i === activeIndex}\n  //         navClickHandler={() => handleNavClick}\n  //       />\n  //     )\n  //   })\n  // : null}*/\n}","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useState","useEffect","useContext","cardsContext","Card","Styled","act","Deck","CardsContext","activeIndex","setActiveIndex","activeCategory","setActiveCategory","handleCategoryClick","e","categoryId","categorySlug","console","log","prevActiveCategory","getActiveCards","handleNavClick","increment","target","tagName","dataset","parentNode","cardCount","Object","values","cards","map","c","questions","flat","length","prevActiveIndex","activeCards","fullCategory","i","_id","slug","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n\nimport cardsContext from \"../../context/Cards/CardsContext\";\n\nimport Card from '../Card/Card';\nimport * as Styled from './Deck.styles'\nimport { act } from 'react-dom/test-utils';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState('');\n\n  // useEffect(() => {\n  //   CardsContext.getActiveCards()\n  // }, [CardsContext])\n\n  const handleCategoryClick = (e, categoryId, categorySlug) => {\n    console.log(categorySlug);\n    console.log(activeCategory)\n    setActiveCategory(prevActiveCategory => {\n      console.log('prev', prevActiveCategory);\n      return categoryId\n      CardsContext.getActiveCards(categoryId)\n      // return { _id: categoryId, categorySlug };\n    });\n  }\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n    \n    if (increment > 0) {\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0)\n    } else { \n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1) \n    }\n  }\n\n  useEffect(() => {\n    CardsContext.getActiveCards(activeCategory);\n  }, []);\n  \n  return (\n    <Styled.Deck>\n      <>\n      {\n        (CardsContext.activeCards && CardsContext.activeCards.length > 0)\n        ? Object.values(CardsContext.activeCards).map((fullCategory, i) => (\n          <a key={`${fullCategory._id}-${i}`}\n            onClick={(e) => handleCategoryClick(e, fullCategory._id, fullCategory.slug)}>\n            {fullCategory.name}\n          </a>\n        )) \n        : Object.values(CardsContext.activeCards).map((fullCategory, i) => (\n          <a key={`${fullCategory._id}-${i}`}\n            onClick={(e) => handleCategoryClick(e, fullCategory._id, fullCategory.slug)}>\n            {fullCategory.name}\n          </a>\n        ))}\n      </>\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;\n          {/* Object.values(ContextCards.cards)\n          .flat()\n          .map(fullCategory => fullCategory.questions)\n          .flat()\n          .map((question, i) => { \n          //     return (\n          //       <Card \n          //         data={question}\n          //         activeSide={`front`}\n          //         key={`${i}-${question._id}`}\n          //         position={i}\n          //         isActive={i === activeIndex}\n          //         navClickHandler={() => handleNavClick}\n          //       />\n          //     )\n          //   })\n          // : null}*/}"]},"metadata":{},"sourceType":"module"}