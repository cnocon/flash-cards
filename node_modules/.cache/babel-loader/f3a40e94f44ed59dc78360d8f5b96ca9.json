{"ast":null,"code":"var _jsxFileName = \"/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles';\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext); // const CategoriesContext = useContext(categoriesContext);\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState('');\n  const [categoryCards, setCategoryCards] = useState(CardsContext.cards[activeCategory]);\n  const obj = {};\n  const categories = Object.values(CardsContext.cards).forEach(q => {\n    obj[q.slug] = {\n      name: q.name,\n      question_ids: q.questions\n    };\n  });\n\n  const handleCategoryClick = categorySlug => {\n    setActiveCategory(e.target.dataset.slug);\n  };\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n\n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0);\n    } else {\n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1);\n    }\n  };\n\n  useEffect(() => {\n    CardsContext.getCards();\n    setCategoryCards(CardsContext.cards[activeCategory]);\n    console.log(categories);\n    console.log(categoryCards);\n  }, [activeCategory]);\n  return /*#__PURE__*/React.createElement(Styled.Deck, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, Object.values(CardsContext.cards).map(q => /*#__PURE__*/React.createElement(\"li\", {\n    key: q.slug,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    onClick: () => handleCategoryClick(q.slug),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, q.name))))), CardsContext.cards ? Object.values(CardsContext.cards).flat().map(fullCategory => fullCategory.questions).flat().map((question, i) => /*#__PURE__*/React.createElement(Card, {\n    data: question,\n    activeSide: `front`,\n    key: `${i}-${question._id}`,\n    position: i,\n    isActive: i === activeIndex,\n    navClickHandler: () => handleNavClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })) : null);\n};\n\nexport default Deck;","map":{"version":3,"sources":["/Users/cristin/Sites/flash-cards/src/components/Deck/Deck.jsx"],"names":["React","useContext","useEffect","useState","Card","cardsContext","Styled","Deck","CardsContext","activeIndex","setActiveIndex","activeCategory","setActiveCategory","categoryCards","setCategoryCards","cards","obj","categories","Object","values","forEach","q","slug","name","question_ids","questions","handleCategoryClick","categorySlug","e","target","dataset","handleNavClick","increment","tagName","parentNode","cardCount","map","c","flat","length","prevActiveIndex","getCards","console","log","fullCategory","question","i","_id"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Card from '../Card/Card';\nimport cardsContext from \"../../context/Cards/CardsContext\";\nimport * as Styled from './Deck.styles'\n\nconst Deck = () => {\n  const CardsContext = useContext(cardsContext);\n  // const CategoriesContext = useContext(categoriesContext);\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [activeCategory, setActiveCategory] = useState('');\n  const [categoryCards, setCategoryCards] = useState(CardsContext.cards[activeCategory]);\n  const obj = {};\n  const categories = Object.values(CardsContext.cards).forEach(q => {\n    obj[q.slug] = {name: q.name, question_ids: q.questions};\n  });\n  \n  const handleCategoryClick = categorySlug => {\n    setActiveCategory(e.target.dataset.slug)\n  }\n\n  const handleNavClick = e => {\n    const increment = e.target.tagName === 'BUTTON' ? e.target.dataset.increment : e.target.parentNode.dataset.increment;\n    const cardCount = Object.values(CardsContext.cards).map(c => c.questions).flat().length;\n    \n    if (increment > 0) {\n      // If advancing to next\n      setActiveIndex(prevActiveIndex => prevActiveIndex + 1 < cardCount ? prevActiveIndex + 1 : 0)\n    } else { \n      // If going back to previous\n      setActiveIndex(prevActiveIndex => prevActiveIndex - 1 >= 0 ? prevActiveIndex - 1 : cardCount - 1) \n    } \n  }\n\n  useEffect(() => {\n    CardsContext.getCards();\n    setCategoryCards(CardsContext.cards[activeCategory])\n    console.log(categories);\n    console.log(categoryCards);\n  }, [activeCategory]);\n\n  return (\n    <Styled.Deck>\n        <nav>\n          <ul>\n            {Object.values(CardsContext.cards).map(q => (\n              <li key={q.slug}>\n                <a onClick={() => handleCategoryClick(q.slug)}>\n                  {q.name}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      { CardsContext.cards\n        ? Object.values(CardsContext.cards).flat()\n          .map(fullCategory => fullCategory.questions).flat()\n          .map((question, i) => ((\n            <Card \n              data={question}\n              activeSide={`front`}\n              key={`${i}-${question._id}`}\n              position={i}\n              isActive={i === activeIndex}\n              navClickHandler={() => handleNavClick} />\n            )))\n        : null }\n    </Styled.Deck>\n  );\n};\n\nexport default Deck;"]},"metadata":{},"sourceType":"module"}